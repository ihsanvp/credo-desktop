name: Build
on:
  push:
    tags:
      - "v*"
  workflow_dispatch:

jobs:
  create-release:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create-release.outputs.result }}

    steps:
      - uses: actions/checkout@v3

      - name: setup node
        uses: actions/setup-node@v3
        with:
          node-version: 16
          
      - name: create release
        id: create-release
        uses: actions/github-script@v6
        env:
          TAG_NAME: ${{ github.ref_name }}
        with:
          script: |
            const { data } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `${process.env.TAG_NAME}`,
              name: `Credo ${process.env.TAG_NAME}`,
              body: 'Take a look at the assets to download and install this app.',
              draft: true,
              prerelease: false
            })

            return data.id

  # release:
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       platform: [macos-latest, ubuntu-latest, windows-latest]
  #       include:
  #         - os: ubuntu-latest
  #           rust_target: x86_64-unknown-linux-gnu
  #         - os: macos-latest
  #           rust_target: x86_64-apple-darwin
  #         - os: macos-latest
  #           rust_target: aarch64-apple-darwin
  #         - os: windows-latest
  #           rust_target: x86_64-pc-windows-msvc

  #   runs-on: ${{ matrix.platform }}
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v3

  #     # for projects that use labels and PRs,
  #     # try https://github.com/mikepenz/release-changelog-builder-action instead
  #     # TODO: use API to collect commit messages
  #     - name: Build Changelog
  #       id: build_changelog
  #       run: echo "changelog=- ADD CHANGELOG" >> $GITHUB_OUTPUT

  #     - name: Node.js setup
  #       uses: actions/setup-node@v3
  #       # NOTE: enterprise developers may hard code a version
  #       with:
  #         # node-version: latest
  #         node-version-file: '.nvmrc'

  #     - name: install pnpm
  #       uses: pnpm/action-setup@v2
  #       with:
  #         version: latest

  #     - name: Install Rust (Stable)
  #       run:
  #         curl https://sh.rustup.rs -sSf | sh -s -- -y

  #     - name: Install dependencies (ubuntu only)
  #       if: matrix.platform == 'ubuntu-latest'
  #       run: |
  #         sudo apt-get update
  #         sudo apt-get install -y libgtk-3-dev webkit2gtk-4.0 libappindicator3-dev librsvg2-dev patchelf

  #     - name: Install app dependencies from lockfile and build web
  #       # NOTE: comment out && yarn build if frontend does not have build script
  #       run: pnpm install && pnpm build:ui

  #     - name: Build the app
  #       uses: tauri-apps/tauri-action@v0

  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #         # TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
  #         # TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
  #       with:
  #         # tauri-action replaces \_\_VERSION\_\_ with the app version
  #         tagName: ${{ github.ref_name }}
  #         releaseName: "Sample Release for Modern Desktop App v__VERSION__"
  #         releaseBody: |
  #           ${{steps.build_changelog.outputs.changelog}}
  #           See the assets to download this version and install.
  #         releaseDraft: true
  #         prerelease: false